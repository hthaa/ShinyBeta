beta_kurtosis <- function(l, u, a, b) {
# Computes the kurtosis of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[3]][[4]]
}
optimize_parameter <- function(param, target_moment, current_moment) {
# Adjusts the parameter using an optimization algorithm (e.g. gradient descent or Newton's method).
# In this example, we use a simple gradient descent update rule.
param + 0.001 * (target_moment - current_moment)
}
fit_beta_distribution(test, 0, 1, 1, 1)
fit_beta_distribution <- function(observed_values, l = NULL, u = NULL, a = NULL, b = NULL, max_iter = 1000, tol = 1e-6) {
# Compute the first four moments of the observed values
mean <- mean(observed_values)
variance <- var(observed_values)
skewness <- sum((observed_values - mean)^3) / ((length(observed_values) - 1) * variance^(3/2))
kurtosis <- sum((observed_values - mean)^4) / ((length(observed_values) - 1) * variance^2) - 3
# Initialize the parameters if not provided
if (is.null(l)) {
l <- min(observed_values)
}
if (is.null(u)) {
u <- max(observed_values)
}
if (is.null(a)) {
a <- 1
}
if (is.null(b)) {
b <- 1
}
# Iterate until the difference between the moments is below the tolerance or the maximum number of iterations is reached
for (i in 1:max_iter) {
# Compute the moments of the four-parameter beta distribution
mean_est <- beta_mean(l, u, a, b)
variance_est <- beta_variance(l, u, a, b)
skewness_est <- beta_skewness(l, u, a, b)
kurtosis_est <- beta_kurtosis(l, u, a, b)
# Check if the difference between the moments is below the tolerance
if (abs(mean - mean_est) < tol && abs(variance - variance_est) < tol &&
abs(skewness - skewness_est) < tol && abs(kurtosis - kurtosis_est) < tol) {
break
}
# Adjust the parameters using an optimization algorithm (e.g. gradient descent or Newton's method)
l <- optimize_parameter(l, mean, mean_est)
u <- optimize_parameter(u, mean, mean_est)
a <- optimize_parameter(a, variance, variance_est)
b <- optimize_parameter(b, variance, variance_est)
}
return(list(l = l, u = u, a = a, b = b))
}
beta_mean <- function(l, u, a, b) {
# Computes the mean of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[1]][[1]]
}
beta_variance <- function(l, u, a, b) {
# Computes the variance of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[2]][[2]]
}
beta_skewness <- function(l, u, a, b) {
# Computes the skewness of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[3]][[3]]
}
beta_kurtosis <- function(l, u, a, b) {
# Computes the kurtosis of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[3]][[4]]
}
optimize_parameter <- function(param, target_moment, current_moment) {
# Adjusts the parameter using an optimization algorithm (e.g. gradient descent or Newton's method).
# In this example, we use a simple gradient descent update rule.
param + 0.001 * (target_moment - current_moment)
}
fit_beta_distribution(test, 0, 1, 1, 1)
fit_beta_distribution <- function(observed_values, l = NULL, u = NULL, a = NULL, b = NULL, max_iter = 1000, tol = 1e-6) {
# Compute the first four moments of the observed values
mean <- mean(observed_values)
variance <- var(observed_values)
skewness <- observedmoments(observed_values)[[3]][[3]]
kurtosis <- observedmoments(observed_values)[[3]][[4]]
# Initialize the parameters if not provided
if (is.null(l)) {
l <- min(observed_values)
}
if (is.null(u)) {
u <- max(observed_values)
}
if (is.null(a)) {
a <- mean
}
if (is.null(b)) {
b <- variance
}
# Iterate until the difference between the moments is below the tolerance or the maximum number of iterations is reached
for (i in 1:max_iter) {
# Compute the moments of the four-parameter beta distribution
mean_est <- beta_mean(l, u, a, b)
variance_est <- beta_variance(l, u, a, b)
skewness_est <- beta_skewness(l, u, a, b)
kurtosis_est <- beta_kurtosis(l, u, a, b)
# Check if the difference between the moments is below the tolerance
if (abs(mean - mean_est) < tol && abs(variance - variance_est) < tol &&
abs(skewness - skewness_est) < tol && abs(kurtosis - kurtosis_est) < tol) {
break
}
# Adjust the parameters using Newton's method
l <- optimize_parameter_newton(l, mean, mean_est)
u <- optimize_parameter_newton(u, mean, mean_est)
a <- optimize_parameter_newton(a, variance, variance_est)
b <- optimize_parameter_newton(b, variance, variance_est)
}
return(list(l = l, u = u, a = a, b = b))
}
beta_mean <- function(l, u, a, b) {
# Computes the mean of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[1]][[1]]
}
beta_variance <- function(l, u, a, b) {
# Computes the variance of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[2]][[2]]
}
beta_skewness <- function(l, u, a, b) {
# Computes the skewness of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[3]][[3]]
}
beta_kurtosis <- function(l, u, a, b) {
# Computes the kurtosis of a four-parameter beta distribution with parameters l, u, a, and b.
betamoments(a, b, l, u)[[3]][[4]]
}
optimize_parameter_newton <- function(param, target_moment, current_moment) {
# Adjusts the parameter using Newton's method.
# In this example, we use a simple update rule for the gradient and Hessian.
gradient <- (current_moment - target_moment) / (current_moment - current_moment^2)
hessian <- -2 * current_moment / (current_moment - current_moment^2)^2
param - gradient / hessian
}
fit_beta_distribution(test, 0, 1, 1, 1)
betamoments(a, b, l, u)[[3]][[4]]
betamoments(a, b, l, u)[[3]][[3]]
betamoments(a, b, l, u)[[2]][[2]]
betamoments(a, b, l, u)[[1]][[1]]
fit_beta_skewness_kurtosis <- function(x, tol=1e-8, maxiter=1000) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n - 3
# Initialize parameter estimates
alpha <- mean(x) * length(x)
beta <- (1 - mean(x)) * length(x)
for (i in 1:maxiter) {
# Calculate gradient and Hessian
g <- c(sum(digamma(alpha + beta) - digamma(alpha) + log(x) - log(1 - x)),
sum(digamma(alpha + beta) - digamma(beta) + log(1 - x) - log(x)))
h <- c(sum(trigamma(alpha) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)))
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3)) + 3
# Calculate residuals
res_skewness <- x_skewness - beta_skewness
res_kurtosis <- x_kurtosis - beta_kurtosis
# Update parameter estimates
delta <- solve(h) %*% c(g[1], g[2], res_skewness, res_kurtosis)
alpha <- alpha + delta[1]
beta <- beta + delta[2]
# Check convergence
if (abs(delta[1]) < tol && abs(delta[2]) < tol) break
}
return(list(alpha=alpha, beta=beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness_kurtosis <- function(x, tol=1e-8, maxiter=1000) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n
# Initialize parameter estimates
alpha <- mean(x) * length(x)
beta <- (1 - mean(x)) * length(x)
for (i in 1:maxiter) {
# Calculate gradient and Hessian
g <- c(sum(digamma(alpha + beta) - digamma(alpha) + log(x) - log(1 - x)),
sum(digamma(alpha + beta) - digamma(beta) + log(1 - x) - log(x)))
h <- c(sum(trigamma(alpha) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)))
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3)) + 3
# Calculate residuals
res_skewness <- x_skewness - beta_skewness
res_kurtosis <- x_kurtosis - beta_kurtosis
# Update parameter estimates
delta <- solve(h) %*% c(g[1], g[2], res_skewness, res_kurtosis)
alpha <- alpha + delta[1]
beta <- beta + delta[2]
# Check convergence
if (abs(delta[1]) < tol && abs(delta[2]) < tol) break
}
return(list(alpha=alpha, beta=beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness_kurtosis <- function(x, tol=1e-8, maxiter=1000) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n
# Initialize parameter estimates
alpha <- 1
beta <- 1
for (i in 1:maxiter) {
# Calculate gradient and Hessian
g <- c(sum(digamma(alpha + beta) - digamma(alpha) + log(x) - log(1 - x)),
sum(digamma(alpha + beta) - digamma(beta) + log(1 - x) - log(x)))
h <- c(sum(trigamma(alpha) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)))
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3))
# Calculate residuals
res_skewness <- x_skewness - beta_skewness
res_kurtosis <- x_kurtosis - beta_kurtosis
# Update parameter estimates
delta <- solve(h) %*% c(g[1], g[2], res_skewness, res_kurtosis)
alpha <- alpha + delta[1]
beta <- beta + delta[2]
# Check convergence
if (abs(delta[1]) < tol && abs(delta[2]) < tol) break
}
return(list(alpha=alpha, beta=beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness_kurtosis <- function(x) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n
# Initialize parameter estimates
best_alpha <- 0
best_beta <- 0
min_error <- Inf
# Grid search over parameter values
for (alpha in seq(0, 50, 0.1)) {
for (beta in seq(0, 50, 0.1)) {
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3))
# Calculate error
error <- (x_skewness - beta_skewness)^2 + (x_kurtosis - beta_kurtosis)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness_kurtosis <- function(x) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n
# Initialize parameter estimates
best_alpha <- .1
best_beta <- .1
min_error <- Inf
# Grid search over parameter values
for (alpha in seq(0, 50, 0.1)) {
for (beta in seq(0, 50, 0.1)) {
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3))
# Calculate error
error <- (x_skewness - beta_skewness)^2 + (x_kurtosis - beta_kurtosis)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness_kurtosis <- function(x) {
# Calculate sample skewness and kurtosis
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
x_kurtosis <- sum((x - x_mean)^4 / x_sd^4) / n
# Initialize parameter estimates
best_alpha <- .1
best_beta <- .1
min_error <- 1
# Grid search over parameter values
for (alpha in seq(0, 50, 0.1)) {
for (beta in seq(0, 50, 0.1)) {
# Calculate skewness and kurtosis of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
beta_kurtosis <- 6 * (alpha - beta)^2 * (alpha + beta + 1) / (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3))
# Calculate error
error <- (x_skewness - beta_skewness)^2 + (x_kurtosis - beta_kurtosis)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness_kurtosis(test)
fit_beta_skewness <- function(x) {
# Calculate sample skewness
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
# Initialize parameter estimates
best_alpha <- 0
best_beta <- 0
min_error <- Inf
# Grid search over parameter values
for (alpha in seq(0, 50, 0.1)) {
for (beta in seq(0, 50, 0.1)) {
# Calculate skewness of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
# Calculate error
error <- (x_skewness - beta_skewness)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness(test)
fit_beta_skewness <- function(x) {
# Calculate sample skewness
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
# Initialize parameter estimates
best_alpha <- 0
best_beta <- 0
min_error <- 50
# Grid search over parameter values
for (alpha in seq(0, 50, 0.1)) {
for (beta in seq(0, 50, 0.1)) {
# Calculate skewness of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
# Calculate error
error <- (x_skewness - beta_skewness)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness(test)
fit_beta_skewness <- function(x) {
# Calculate sample skewness
n <- length(x)
x_mean <- mean(x)
x_sd <- sd(x)
x_skewness <- sum((x - x_mean)^3 / x_sd^3) / n
# Initialize parameter estimates
best_alpha <- 0
best_beta <- 0
min_error <- Inf
# Grid search over parameter values
for (alpha in seq(0.1, 50, 0.1)) {
for (beta in seq(0.1, 50, 0.1)) {
# Calculate skewness of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_sd <- sqrt(alpha * beta / (alpha + beta)^2 / (alpha + beta + 1))
beta_skewness <- (2 * beta * (alpha + 1)^2) / (alpha * (beta + 1)^2)
# Calculate error
error <- (x_skewness - beta_skewness)^2
# Update best parameter estimates
if (error < min_error) {
min_error <- error
best_alpha <- alpha
best_beta <- beta
}
}
}
return(list(alpha=best_alpha, beta=best_beta))
}
fit_beta_skewness(test)
fit_beta_mean_variance <- function(x, tol=1e-8, maxiter=1000) {
# Calculate sample mean and variance
n <- length(x)
x_mean <- mean(x)
x_var <- var(x)
# Initialize parameter estimates
alpha <- (1 - x_mean) / x_var - 1
beta <- alpha * (1 - x_mean) / x_mean
for (i in 1:maxiter) {
# Calculate gradient and Hessian
g <- c(sum(digamma(alpha + beta) - digamma(alpha) + log(x) - log(1 - x)),
sum(digamma(alpha + beta) - digamma(beta) + log(1 - x) - log(x)))
h <- c(sum(trigamma(alpha) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)),
sum(trigamma(beta) - trigamma(alpha + beta)))
# Calculate mean and variance of beta distribution
beta_mean <- alpha / (alpha + beta)
beta_var <- alpha * beta / (alpha + beta)^2 / (alpha + beta + 1)
# Calculate residuals
res_mean <- x_mean - beta_mean
res_var <- x_var - beta_var
# Update parameter estimates
delta <- solve(h) %*% c(g[1], g[2], res_mean, res_var)
alpha <- alpha + delta[1]
beta <- beta + delta[2]
# Check convergence
if (abs(delta[1]) < tol && abs(delta[2]) < tol) break
}
return(list(alpha=alpha, beta=beta))
}
fit_beta_mean_variance(test)
sfm <- function(covarianceMatrix, n) {
# Check that the input is a square matrix
if (nrow(covarianceMatrix) != ncol(covarianceMatrix)) {
stop("Input must be a square matrix")
}
# Calculate the number of assets
p <- ncol(covarianceMatrix)
# Initialize the factor loadings matrix
factorLoadings <- matrix(1, nrow = 1, ncol = p)
# Initialize the factor variance
factorVariance <- 1
# Initialize the residual variance
residualVariance <- covarianceMatrix - t(factorLoadings) %*% factorVariance %*% factorLoadings
# Set the maximum number of iterations and tolerance for convergence
maxIter <- 1000
tol <- 1e-6
# Initialize the log-likelihood
logLikelihood <- -p * log(2 * pi) - p * log(det(covarianceMatrix)) -
sum(diag(solve(covarianceMatrix) %*% residualVariance)) / 2
# Iterate until convergence or maximum number of iterations is reached
for (i in 1:maxIter) {
# Calculate the score vector
scoreVector <- t(factorLoadings) %*% solve(factorVariance) - solve(residualVariance) %*% factorLoadings
# Calculate the information matrix
informationMatrix <- t(factorLoadings) %*% solve(factorVariance) %*% factorLoadings +
solve(residualVariance)
# Update the factor loadings
factorLoadings <- factorLoadings - solve(informationMatrix) %*% scoreVector
# Update the factor variance
factorVariance <- (n - p - 1) / sum(diag(solve(t(factorLoadings) %*% factorLoadings)))
# Update the residual variance
residualVariance <- covarianceMatrix - t(factorLoadings) %*% factorVariance %*% factorLoadings
# Calculate the log-likelihood
newLogLikelihood <- -p * log(2 * pi) - p * log(det(covarianceMatrix)) -
sum(diag(solve(covarianceMatrix) %*% residualVariance)) / 2
# Check for convergence
if (abs(newLogLikelihood - logLikelihood) < tol) {
break
} else {
logLikelihood <- newLogLikelihood
}
}
# Return the results as a list
return(list(factorLoadings = factorLoadings, factorVariance = factorVariance,
residualVariance = residualVariance, logLikelihood = logLikelihood))
}
?mdo
set.seed(1234)
rawdata <- matrix(rnorm(500), ncol = 5)
common <- rnorm(100)
rawdata <- apply(rawdata, 2, function(x) {x + common})
sfm(cov(rawdata), nrow(rawdata))
